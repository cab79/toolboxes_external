function result = f_johnson_fit(Y,proc,plt)
% - fit a Johnson distribution to observed data
%
% USAGE: result = f_johnson_fit(Y,proc,plt);
%
% Y    = column vector of sample observations
% proc = fit using moments (= 'M', default), quantiles ('Q'), or moments forcing
%        a lognormal distribution (= 'M_SL')
% plt  = optionally plot PDF (=1) or PDF & CDF (=2)                (default = 0)
%
% result = structure of results with the following fields:
%  .type  = type of Johnson distribution as: SL, SU, SB, SN, or ST
%  .coefs = parameters as: [gamma delta xi lambda]
%  .proc  = method used as: 'moments', 'quantiles', or 'moments_SL'
%
% SEE ALSO: f_johnson_M, f_johnson_Q

% -----Notes:-----
% This function uses either moments or quantiles to fit a Johnson distribution
% to a set of observed data. Quantiles are points taken at regular intervals
% from the CDF of a random variate.
%
% The coefficients of a Johnson curve consist of shape (gamma & delta),
% location (xi), and scale (lambda) parameters and use the following transforms:
%  SL: Lognormal distribution = exponential transform
%  SU: Unbounded distribution = hyperbolic sine transform
%  SB: Bounded distribution   = logistic transforma
%  SN: Normal distribution    = identity transform
%
% Bounded (SB) curves are bounded on either the lower, upper, or both ends and
% include distributions such as the Beta and Gamma. Unbounded (SU) curves
% include distributions such as the Normal and t distributions.

% -----References:-----
% Hill, I. D., R. Hill, and R. L. Holder, 1976. Algorithm AS 99: Fitting Johnson
%  Curves by Moments. Journal of the Royal Statistical Society. Series C
%  (Applied Statistics) Vol. 25, No. 2, 180-189.
% Johnson, N. L. 1949. Systems of frequency curves generated by methods of
%  translation. Biometrika 36: 149-176.
% Wheeler, R. E. 1980. Quantile estimators of Johnson curve parameters.
%  Biometrika 67(3): 725-728.
%
% Portions of the plot routine are modified after Mike Sheppard's 'allfitdist'
% function.

% -----Author:-----
% by David L. Jones, Mar-2014
%
% This file is part of the 'JOHNSON CURVE TOOLBOX FOR MATLAB'
% and is released under the BSD 2-clause license.

% Apr-2014: updated documentation; fixed default value for PLT; PDF's of Johnson
%           variates now accurately plotted; added support for plotting CDF;
%           plotting of normal variates commented out.

% -----Set defaults & check input:-----
if (nargin < 2), proc = 'M'; end % default use moments vs. quantiles
if (nargin < 3), plt  = 0;   end % default don't create a plot

% Check size of input:
if (size(Y,2)>1)
   error('Y must be a column vector!');
end

% Check for missing values:
if any(isnan(Y))
   error('Y contains NaN''s!');
end
% -------------------------------------

switch proc
   case {'M','M_SL'} % MOMENTS:
      proc_txt = 'moments';
      mu       = mean(Y);
      sd       = std(Y);
      skew     = skewness(Y,0);
      kurt     = kurtosis(Y,0);
      
      % A negative value for 'kurt' forces the lognormal family:
      if isequal(proc,'M_SL')
         kurt = -1;
         proc_txt = 'moments_SL';
      end
      
      % Use the 1st 4 moments of Y as distribution parameters to fit a Johnson
      % curve using Hill et al.'s (1976) method:
      result = f_johnson_M(mu,sd,skew,kurt);
      
   case 'Q' % QUANTILES:
      proc_txt = 'quantiles';
      
      % Step 1: Define the 4 quantiles that the 4 evenly spaced standard normal
      % quantiles of [-1.5 -0.5 0.5 1.5] should be transformed to; i.e, compute
      % the quantiles of Y corresponding to the cumulative probabilities of
      % [0.067 0.309 0.691 0.933].
      qnorm = [-1.5 -0.5 0.5 1.5];
      probs = normcdf(qnorm);
      
      % Step 2: Get the quantiles of Y:
      q = quantile(Y,probs);
      
      % Step 3: Use the quantiles of Y as distribution parameters to fit a
      % Johnson curve using Wheeler's (1980) method:
      result = f_johnson_Q(q(1),q(2),q(3),q(4));
   otherwise
      error('PROC must be ''M'' or ''Q''!');
end

% Report any error messages:
if (isfield(result,'msg'))
   fprintf('\n\n-------------------------------------------------------------');
   fprintf('\nF_JOHNSON_M reported the following error message:\n')
   fprintf('-> %s\n',result.msg);
   fprintf('-------------------------------------------------------------\n\n');
end

% -----Create a plot:-----
if (plt>0)
   coef     = result.coef;
   type     = result.type;
   colorVar = [1 1 1]*0.65; % define histogram color
   widthVar = 1.5;          % define line width
   
   % -----Uncomment this section to also plot Normal Curve-----
   %    % -----Normal Variates:-----
   %       Z = f_johnson_y2z(Y,coef,type); % transform Johnson to Normal
   %
   %       figure; set(gcf,'color','w');
   %       hold on;
   %       box  on;
   %       grid on;
   %
   %       % Plot histogram of Normal variates:
   %       nbins = max(min(length(Z)./10,100),50);
   %       zi    = linspace(min(Z),max(Z),nbins)';
   %       dz    = mean(diff(zi));
   %       zfi   = histc(Z,zi-dz);
   %       zfi   = zfi./sum(zfi)./dz;
   %       h(1)  = bar(zi,zfi,'FaceColor',colorVar,'EdgeColor','none');
   %
   %       % Plot fitted values:
   %       zi2  = linspace(min(Z),max(Z),nbins*10)';
   %       zs   = normpdf(zi2,0,1); % normal probability densities
   %       h(2) = plot(zi2,zs,'k-','LineWidth',widthVar);
   %
   %       % Customize plot:
   %       title('Normal (transformed) Variates');
   %       xTxt = sprintf('Values  (n = %d)',size(Z,1));
   %       xlabel(xTxt);
   %       ylabel('Probability Density');
   %       legend(h,'Observed','Fitted')
   % --------------------------
   % ----------------------------------------------------------
   
   % -----Johnson Variates:-----
   figure; set(gcf,'color','w');
   hold on;
   box  on;
   grid on;
   
   % Plot histogram of Johnson variates:
   nbins = max(min(length(Y)./10,100),50); % get # bins
   yi    = linspace(min(Y),max(Y),nbins)'; % range
   dy    = mean(diff(yi));                 % step size
   yfi   = histc(Y,yi-dy);                 % get frequencies
   yfi   = yfi./sum(yfi)./dy;              % scale frequencies
   h(1)  = bar(yi,yfi,'FaceColor',colorVar,'EdgeColor','none');
   
   % Plot fitted values:
   Z    = f_johnson_y2z(Y,coef,type);   % transform Johnson to Normal
   zi2  = linspace(min(Z),max(Z),nbins*10)';
   yi2  = f_johnson_z2y(zi2,coef,type); % transform to Johnson variates
   ys   = f_johnson_pdf(yi2,coef,type); % Johnson probability densities
   h(2) = plot(yi2,ys,'k-','LineWidth',widthVar);
   
   % Customize plot:
   titleTxt = sprintf('Johnson (%s) variates',type);
   title(titleTxt);
   xTxt = sprintf('Values  (n = %d)',size(Y,1));
   xlabel(xTxt);
   ylabel('Probability Density');
   legend(h,'Observed','Fitted','location','best')
   % --------------------------
   
   if (plt>1)
      % -----Plot CDF of Johnson Variates:-----
      figure; set(gcf,'color','w');
      hold on;
      box  on;
      grid on;
      
      % Plot fitted values:
      ysCDF = f_johnson_cdf(yi2,coef,type); % Johnson cumulative probability densities
      plot(yi2,ysCDF,'k-','LineWidth',widthVar);
      
      % Customize plot:
      titleTxt = sprintf('Johnson (%s) variates',type);
      title(titleTxt);
      xTxt = sprintf('Values  (n = %d)',size(Y,1));
      xlabel(xTxt);
      ylabel('Cumulative Probability Density');
      % --------------------------
   end
end

% Wrap results up into a structure;
result.proc = proc_txt;
